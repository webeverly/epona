import Head from "next/head";
import { GetStaticPaths, GetStaticProps } from "next";
import Link from "next/link";
import { Header } from "../Header";
import { loadProduce, ProduceData } from "../../data/produce";
import styles from "./ProducePage.module.scss";

interface ProducePageProps {
  produce: ProduceData;
}

export const ProducePage = ({ produce }: ProducePageProps): JSX.Element => {
  return (
    <>
      <Head>
        <title>Climact√©rique :: {produce.name}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Header />

      <section className={styles.main}>
        <h2>{produce.name}</h2>
        <p>Type: {produce.type}</p>
        <p>Is climacteric: {nullableBooleanDisplay(produce.isClimacteric)}</p>
        <p>
          Is ethylene sensitive:{" "}
          {nullableBooleanDisplay(produce.isEthyleneSensitive)}
        </p>
        <p>Ethylene emmission: {produce.ethyleneEmmission}</p>
        <p>
          Ethylene sensitivy: {produce.ethyleneSensitivity || "Unavailable"}
        </p>
        {produce.imageUrl && (
          <p>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={produce.imageUrl.replace("/public", "")}
              alt={produce.name}
            />
          </p>
        )}

        <Link href="/">
          <a className="button">Home</a>
        </Link>
      </section>
    </>
  );
};

function nullableBooleanDisplay(b: boolean | null): string {
  return b === null ? "Unavailable" : b ? "Yes" : "No";
}

export const getStaticPaths: GetStaticPaths = async (context) => {
  const allPaths = await Promise.all(
    (context.locales || [context.defaultLocale || "en"]).map(async (l) => {
      const data = await loadProduce(l as any);

      return data.map((p) => {
        return {
          params: { id: p.id },
        };
      });
    })
  );

  const paths = ([] as any[]).concat(...allPaths);
  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const id = context.params?.id;
  const data = await loadProduce(context.locale as any);
  console.log(context.locale, data);
  const produce = data.find((p) => p.id === id);
  if (!produce) {
    return {
      notFound: true,
    };
  }

  return {
    props: { produce },
  };
};
